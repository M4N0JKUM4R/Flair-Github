const githubAPI="https://api.github.com/users/",userCard=document.querySelector(".gshf-user-card"),searchEl=document.querySelector(".gshf-search input"),formSearch=document.querySelector("form.gshf-search"),defaultUser=document.querySelector("[data-user]"),searchAPI="https://api.github.com/search/users?q=";let intervalTimer,searchOutputcontainer=document.querySelector(".gshf-search-output");async function githubUsers(e){userCard.innerHTML='<div class="loading"><img src="https://github.githubassets.com/images/modules/logos_page/Octocat.png" /></div>',userCard.classList.add("loading");const t=await fetch(githubAPI+e),s=await t.json(),a=await fetch(githubAPI+e+"/repos"),r=await a.json();await loader();createCard(s,r),userCard.classList.remove("loading")}function createCard(e,t){const{name:s,avatar_url:a,location:r,followers:n,bio:c,following:i,public_repos:o,html_url:l}=e;"Not Found"!==e.message?e&&(userCard.innerHTML=`<div class="profile-pic"><a href="${l}" target="_blank"><img src="${a}" /></a></div>\n                                    <div class="details">\n                                        <h2 class="name">${checkName(s)}<div class="location">${checkLocation(r)}</div></h2>\n                                        <div class="desc">${checkBio(c)}</div>\n                                        \n                                        <div class="stats">\n                                            <div class="following"><span class="title">Following:</span> ${i}</div>\n                                            <div class="followers"><span class="title">Followers:</span> ${n}</div>\n                                            <div class="repo"><span class="title">Repos:</span> ${o}</div>\n                                        </div>\n                                        <h3 class="title">Top Repositories</h3>\n                                        <div class="repos"></div>`,t.sort(((e,t)=>t.stargazers_count-e.stargazers_count)),t.slice(0,9).forEach(((e,t)=>{const{html_url:s,name:a,stargazers_count:r}=e;let n=document.createElement("div");n.classList.add("div-repo"),n.innerHTML=`<a target="_blank" href="${s}">${a}</a><div class="stars">${r}</div>`,userCard.querySelector(".repos").appendChild(n)}))):noUser()}function loader(){let e=document.createElement("div"),t=document.createElement("div");e.classList.add("gshf-loader"),t.classList.add("gshf-loader-progress"),e.append(t),userCard.append(e);let s=10;return new Promise(((e,a)=>{let r=setInterval((()=>{t.style.width=`${s}%`,s>100&&(s=100,t.style.width="100%",clearInterval(r),e(s)),s+=5}),100)}))}function checkBio(e){return e||"Air of mystery around this user."}function checkLocation(e){return e||"Somewhere on Earth"}function checkName(e){return e||"I have set no name"}function noUser(){userCard.innerHTML='No such user. <img src="https://github.githubassets.com/images/modules/logos_page/Octocat.png" />'}async function getInput(){const e=await writing();searchFunc(e)}githubUsers(defaultUser.getAttribute("data-user"));const writing=()=>new Promise(((e,t)=>{searchEl.addEventListener("input",(()=>{clearTimeout(intervalTimer),searchEl.value.length>=3&&(intervalTimer=setTimeout((()=>{e(searchEl.value)}),500))}))}));null!==searchEl&&searchEl.addEventListener("input",(()=>{getInput(),0==searchEl.value.length&&(searchOutputcontainer.innerHTML="")}));const searchFunc=async e=>{let t=await fetch(searchAPI+e),s=await t.json();searchOutputcontainer.innerHTML="",showSearch(s)};let totalResults=formSearch.getAttribute("data-results");const showSearch=e=>{e.total_count?e.items.slice(0,totalResults).forEach((e=>{const{login:t,avatar_url:s,type:a}=e;let r=document.createElement("div");r.classList.add("search-item"),searchOutputcontainer.append(r),r.innerHTML=`<div class="search-avatar"><img src="${s}" /></div><div class="name">${t}</div><div class="type">${a}</div>`,r.addEventListener("click",(()=>{githubUsers(t),searchOutputcontainer.innerHTML=""}))})):searchOutputcontainer.innerHTML='<div class="search-item no-search">No such users</div>'};null!==formSearch&&formSearch.addEventListener("submit",(e=>{e.preventDefault()})),document.addEventListener("click",(e=>{e.composedPath().includes(formSearch)||(searchOutputcontainer.innerHTML="")}));